package com.sergeik.strings;

/**
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one
 * palindromic subsequence from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string if it is generated by deleting some characters of a given string
 * without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 *
 * A string is called palindrome if is one that reads the same backward as well as forward.
 */
public class RemovePalindromicSubsequences {

    public static void main(String[] args) {
        assert 1 == solution("ababa");
        assert 2 == solution("abb");
        assert 0 == solution("");
    }

    private static int solution(String s) {
        if (s.length() == 0)
            return 0;
        int l = 0, r = s.length() - 1;
        while (l < r) {
            if (s.charAt(l) == s.charAt(r)) {
                l++; r--;
            } else {
                return 2;
            }
        }
        return 1;
    }

}
