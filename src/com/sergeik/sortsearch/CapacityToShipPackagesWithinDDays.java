package com.sergeik.sortsearch;

public class CapacityToShipPackagesWithinDDays {

    public static void main(String[] args) {
        assert 251000 == solution(new int[] {500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,
                500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500},
                1);
        assert 3 == solution(new int[] {1,2,3,1,1}, 4);
        assert 6 == solution(new int[] {3,2,2,4,1,4}, 3);
        assert 15 == solution(new int[] {1,2,3,4,5,6,7,8,9,10}, 5);
    }

    private static int solution(int[] weights, int days) {
        int left = 1, right = 500 * weights.length;
        while (left < right) {
            int middle = (left + right) / 2;
            boolean willFit = fit(weights, days, middle);
            if (willFit) {
                right = middle;
            } else {
                left = middle + 1;
            }
        }
        return left;
    }

    private static boolean fit(int[] weights, int days, int cap) {
        int idx = 0;
        while (idx < weights.length && days-- > 0) {
            int load = 0;
            while (idx < weights.length && load + weights[idx] <= cap) {
                load += weights[idx++];
            }
        }
        return days >= 0 && idx >= weights.length;
    }

}
